(()=>{"use strict";const e=class{constructor(e){this.name=e,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let e=0;e<100;e++)this.boardPositionArray.push(e)}receiveAttack(e){return this.boardPositionArray.includes(e)?(this.boardPositionArray.includes(e)&&this.boardPositionArray.splice(e,1),this.checkingIfHit(e)):"out of the box"}checkingIfHit(e){return!!this.hasShipArray.includes(e)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(e),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(e){const r=e.sort(((e,r)=>e-r)),t=[9,19,29,39,49,59,69,79,89,99],s=[90,91,92,93,94,95,96,97,98,99];for(let o=0;o<r.length-1;o++){if(e[o]<0)return!1;if(!this.boardPositionArray.includes(r[o]))return!1;if(this.hasShipArray.includes(e[o]))return!1;if(this.hasShipArray.includes(e[r.length-1]))return!1;if(r[o+1]-r[o]!=1&&r[o+1]-r[o]!=10)return!1;if(t.includes(r[o])||s.includes(r[o])){if(e.every((e=>t.includes(e)||s.includes(e))))break;if(o!==r.length||0!==o)return!1}}return this.hasShipArray.push(...r),!0}}}};class r{constructor(e,r,t,s=0){this.name=e,this.length=r,this.position=t,this.hits=s,this.hasSunken=!1}hit(e){this.position.splice(this.position.indexOf(e),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}const t=new e("player"),s=new e("computer"),o=document.querySelector(".game-start");!function(){!function(){function e(e,r=10,t=10){e.style.setProperty("--grid-rows",r),e.style.setProperty("--grid-cols",t);for(let s=0;s<r*t;s++){const r=document.createElement("div");e.appendChild(r),r.classList.add("grid-item"),r.id=s}}const r=document.querySelector(".player-1"),t=document.querySelector(".player-2");e(r),e(t)}();const e=(r,t)=>{const s=Math.floor(100*Math.random()),o=[],i=[1,10,1,10,10,1,10,1],n=i[Math.floor(Math.random()*i.length)];for(let e=0;e<r;e++)o.push(s+e*n);return t.board.shipsPlacement(o)?o:e(r,t)},i=document.querySelector(".player-1"),n=document.querySelector(".player-2");n.classList.add("turn");const a=document.querySelector(".randomPlayer");a.addEventListener("click",(()=>{(()=>{t.ships=[],t.board.hasShipArray=[];const s=document.querySelectorAll(".player-1 .grid-item");s.forEach((e=>{e.style.backgroundColor="white"}));let o=5;for(let s=0;s<5;s++){const i=new r(`ship${s}`,o,e(o,t));t.ships.push(i),2!==o&&o--}for(let e=0;e<5;e++)0===e&&(t.board.hasShipArray=[]),t.board.shipsPlacement(t.ships[e].position);s.forEach((e=>{t.board.hasShipArray.includes(parseInt(e.id,10))&&(e.style.backgroundColor="green")}))})()})),o.addEventListener("click",(()=>{i.style.pointerEvents="none",(()=>{document.querySelector(".player-1").classList.add("turn");let t=5;for(let o=0;o<5;o++){const i=new r(`ship${o}`,t,e(t,s));s.ships.push(i),2!==t&&t--}for(let e=0;e<5;e++)0===e&&(s.board.hasShipArray=[]),s.board.shipsPlacement(s.ships[e].position)})(),a.disabled=!0,o.disabled=!0,n.classList.remove("turn")}))}(),function(){const e=e=>0===e.board.hasShipArray.length&&(document.querySelector(".game").style.pointerEvents="none",console.log(`${e.name} Lost`),!0),r=[],o=[],i=document.querySelector(".player-1"),n=document.querySelector(".player-2");document.querySelectorAll(".player-2 .grid-item").forEach((a=>{a.addEventListener("click",(()=>{const l=parseFloat(a.id);if(!r.includes(l)){r.push(l);const c=s.board.hasShipArray;if(c.includes(l)){if(a.style.backgroundColor="red",c.splice(c.indexOf(l),1),e(s))return 0}else a.style.backgroundColor="yellow";n.classList.add("turn"),i.classList.remove("turn"),setTimeout((()=>{(()=>{const r=Math.floor(Math.random()*t.board.boardPositionArray.length),s=t.board.boardPositionArray[r];if(t.board.boardPositionArray.splice(r,1),!o.includes(s)){const r=document.getElementById(`${s}`);o.push(s);const a=t.board.hasShipArray;if(a.includes(s)){if(r.style.backgroundColor="red",a.splice(a.indexOf(s),1),e(t))return 0}else r.style.backgroundColor="yellow";i.classList.add("turn"),n.classList.remove("turn")}})()}),1e3)}return 0}))}))}(),function(){const e=document.querySelectorAll(".player-1 .grid-item"),s=document.querySelector(".rotate");let i=1;s.addEventListener("click",(()=>{i=1===i?10:1}));let n=5,a=0;e.forEach((s=>{s.addEventListener("click",(()=>{const l=[];for(let e=0;e<n;e++){const r=parseInt(s.id,10)+e*i;l.push(r)}if(!t.board.shipsPlacement(l))return!1;const c=new r(`ship-${a}`,n,l);return t.ships.push(c),console.log(t),e.forEach((e=>{e.style.backgroundColor=" ",e.style.border="1px solid red",t.board.hasShipArray.includes(parseInt(e.id,10))&&e.classList.add("green")})),a++,5===a&&o.click(),2===n?0:(n--,!0)})),s.addEventListener("mouseover",(()=>{for(let e=1;e<n;e++){const r=document.getElementById(`${parseInt(s.id,10)+e*i}`);if("green"===r.classList[1])return!1;r.style.border="2px solid green"}s.style.border="2px solid green"})),s.addEventListener("mouseleave",(()=>{for(let e=1;e<5;e++){const r=document.getElementById(`${parseInt(s.id,10)+e*i}`);if("green"===r.classList[1])return!1;r.style.border="1px solid red"}s.style.border="1px solid red"}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,