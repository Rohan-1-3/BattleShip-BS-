(()=>{"use strict";const s=class{constructor(s){this.name=s,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let s=0;s<100;s++)this.boardPositionArray.push(s)}receiveAttack(s){return this.boardPositionArray.includes(s)?(this.boardPositionArray.includes(s)&&this.boardPositionArray.splice(s,1),this.checkingIfHit(s)):"out of the box"}checkingIfHit(s){return!!this.hasShipArray.includes(s)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(s),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(s){const t=s.sort(((s,t)=>s-t)),i=[9,19,29,39,49,59,69,79,89,99],r=[90,91,92,93,94,95,96,97,98,99];for(let e=0;e<t.length-1;e++){if(s[e]<0)return!1;if(!this.boardPositionArray.includes(t[e]))return!1;if(this.hasShipArray.includes(s[e]))return!1;if(t[e+1]-t[e]!=1&&t[e+1]-t[e]!=10)return!1;if(i.includes(t[e])||r.includes(t[e])){if(s.every((s=>i.includes(s)||r.includes(s))))break;if(e!==t.length&&0!==e)return!1}}return this.hasShipArray.push(...t),!0}}}};class t{constructor(s,t,i,r=0){this.name=s,this.length=t,this.position=i,this.hits=r,this.hasSunken=!1}hit(s){this.position.splice(this.position.indexOf(s),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}!function(){!function(){function s(s,t=10,i=10){s.style.setProperty("--grid-rows",t),s.style.setProperty("--grid-cols",i);for(let r=0;r<t*i;r++){const t=document.createElement("div");s.appendChild(t),t.classList.add("grid-item"),t.id=r}}const t=document.querySelector(".player-1"),i=document.querySelector(".player-2");s(t),s(i)}();const i=new s("player"),r=(new s("computer"),new t("carrier",5,[0,1,2,3,4]));i.ships.push(r);const e=new t("battleship",4,[80,81,82,83]);i.ships.push(e);const n=new t("destroyer",3,[90,91,92]);i.ships.push(n);const o=new t("patrolboat",2,[21,11]);i.ships.push(o);const h=new t("patrolboat2",2,[68,69]);i.ships.push(h);for(let s=0;s<i.ships.length;s++)i.board.shipsPlacement(i.ships[s].position);console.log(i),document.querySelectorAll(".player-1 .grid-item").forEach((s=>{i.board.hasShipArray.includes(parseInt(s.id,10))&&(s.style.backgroundColor="green")}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,