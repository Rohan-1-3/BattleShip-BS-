(()=>{"use strict";const s=class{constructor(s){this.name=s,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let s=0;s<100;s++)this.boardPositionArray.push(s)}receiveAttack(s){return this.boardPositionArray.includes(s)?(this.boardPositionArray.includes(s)&&this.boardPositionArray.splice(s,1),this.checkingIfHit(s)):"out of the box"}checkingIfHit(s){return!!this.hasShipArray.includes(s)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(s),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(s){const i=s.sort(((s,i)=>s-i)),t=[9,19,29,39,49,59,69,79,89,99],e=[90,91,92,93,94,95,96,97,98,99];for(let r=0;r<i.length-1;r++){if(s[r]<0)return!1;if(!this.boardPositionArray.includes(i[r]))return!1;if(i[r+1]-i[r]!=1&&i[r+1]-i[r]!=10)return!1;if(t.includes(i[r])||e.includes(i[r])){if(s.every((s=>t.includes(s)||e.includes(s))))break;if(r!==i.length&&0!==r)return!1}if(this.hasShipArray.includes(s[r]))return!1}return this.hasShipArray.push(...i),!0}}}};class i{constructor(s,i,t,e=0){this.name=s,this.length=i,this.position=t,this.hits=e,this.hasSunken=!1}hit(s){this.position.splice(this.position.indexOf(s),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}!function(){!function(){function s(s,i=10,t=10){s.style.setProperty("--grid-rows",i),s.style.setProperty("--grid-cols",t);for(let e=0;e<i*t;e++){const i=document.createElement("div");s.appendChild(i),i.classList.add("grid-item"),i.id=e}}const i=document.querySelector(".player-1"),t=document.querySelector(".player-2");s(i),s(t)}();const t=new s("player"),e=(new s("computer"),new i("carrier",5,1,[0,1,2,3,4]));t.ships.push(e);const r=new i("battleship",4,2,[80,81,82,83]);t.ships.push(r);const n=new i("battleship",3,2,[90,91,92]);t.ships.push(n);const h=new i("battleship",2,2,[21,11]);t.ships.push(h),t.board.shipsPlacement(t.ships[0].position),t.board.shipsPlacement(t.ships[1].position),t.board.shipsPlacement(t.ships[2].position),t.board.shipsPlacement(t.ships[3].position),console.log(t),document.querySelectorAll(".player-1 .grid-item").forEach((s=>{t.board.hasShipArray.includes(parseInt(s.id,10))&&(s.style.backgroundColor="green")}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bWVCb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvcGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9zaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZUNyZWF0aW9uL3NoaXBQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lQ3JlYXRpb24vZ2FtZUJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgR2FtZUJvYXJke1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLmJvYXJkUG9zaXRpb25BcnJheSA9IFtdO1xyXG4gICAgICAgIHRoaXMuaGFzU2hpcEFycmF5ID0gW107XHJcbiAgICAgICAgdGhpcy5ib2FyZENyZWF0ZSgpOy8vIGluc3RhbnRseSBjcmVhdGVzIGEgYm9hcmRcclxuICAgIH1cclxuXHJcbiAgICBib2FyZENyZWF0ZSgpe1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7aTwxMDA7aSsrKXtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFBvc2l0aW9uQXJyYXkucHVzaChpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVjZWl2ZUF0dGFjayhwb3Mpey8vIHJlY2VpdmVzIGF0dGFjayBhbmQgbWFya3MgaWYgaGl0IG9yIG1pc3NcclxuICAgICAgICBpZighdGhpcy5ib2FyZFBvc2l0aW9uQXJyYXkuaW5jbHVkZXMocG9zKSkgcmV0dXJuIFwib3V0IG9mIHRoZSBib3hcIjtcclxuICAgICAgICBpZih0aGlzLmJvYXJkUG9zaXRpb25BcnJheS5pbmNsdWRlcyhwb3MpKXtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFBvc2l0aW9uQXJyYXkuc3BsaWNlKHBvcywxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tpbmdJZkhpdChwb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNraW5nSWZIaXQocG9zKXtcclxuICAgICAgICBpZih0aGlzLmhhc1NoaXBBcnJheS5pbmNsdWRlcyhwb3MpKXsvLyBjaGVja2luZyBoaXQsIGlmIGhpdCByZW1vdmVzIGJsb2NrIGZyb20gc2hpcEFycmF5XHJcbiAgICAgICAgICAgIHRoaXMuaGFzU2hpcEFycmF5LnNwbGljZSh0aGlzLmhhc1NoaXBBcnJheS5pbmRleE9mKHBvcyksMSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2FtZUVuZCgpey8vIGNoZWNrIGlmIGFsbCBzaGlwcyBzdW5rXHJcbiAgICAgICAgcmV0dXJuICEhKHRoaXMuaGFzU2hpcEFycmF5Lmxlbmd0aCA9PT0gMCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hpcHNQbGFjZW1lbnQoc2hpcHNBcnIpe1xyXG4gICAgICAgIGNvbnN0IHNob3J0ZWRTaGlwc0FyciA9IHNoaXBzQXJyLnNvcnQoKGEsIGIpID0+YSAtIGIpOy8vIHNvcnRpbmdcclxuICAgICAgICAvLyBib3JkZXIgb2YgdGhlIGJvYXJkXHJcbiAgICAgICAgY29uc3QgYm9yZGVySG9yaXpvbnRhbCA9IFs5LDE5LDI5LDM5LDQ5LDU5LDY5LDc5LDg5LDk5XTtcclxuICAgICAgICBjb25zdCBib3JkZXJWZXJ0aWNhbCA9IFs5MCw5MSw5Miw5Myw5NCw5NSw5Niw5Nyw5OCw5OV07XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNob3J0ZWRTaGlwc0Fyci5sZW5ndGgtMTtpKyspe1xyXG4gICAgICAgICAgICAvLyBwbGFjZW1lbnQgYmV5b25kIGJvYXJkXHJcbiAgICAgICAgICAgIGlmKHNoaXBzQXJyW2ldPDApIHJldHVybiBmYWxzZTtcclxuICAgIFxyXG4gICAgICAgICAgICBpZighdGhpcy5ib2FyZFBvc2l0aW9uQXJyYXkuaW5jbHVkZXMoc2hvcnRlZFNoaXBzQXJyW2ldKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBwbGFjZW1lbnQgaW4gcmFuZG9tIG9yZGVyXHJcbiAgICAgICAgICAgIGlmKCEoKHNob3J0ZWRTaGlwc0FycltpKzFdIC0gc2hvcnRlZFNoaXBzQXJyW2ldKSA9PT0gMSBcclxuICAgICAgICAgICAgfHwgKHNob3J0ZWRTaGlwc0FycltpKzFdIC0gc2hvcnRlZFNoaXBzQXJyW2ldKSA9PT0gMTApKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIHBsYWNlbWVudCBjcm9zc2VzIHRoZSB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRvbCBib3JkZXJcclxuICAgICAgICAgICAgaWYoYm9yZGVySG9yaXpvbnRhbC5pbmNsdWRlcyhzaG9ydGVkU2hpcHNBcnJbaV0pIFxyXG4gICAgICAgICAgICB8fCBib3JkZXJWZXJ0aWNhbC5pbmNsdWRlcyhzaG9ydGVkU2hpcHNBcnJbaV0pKXtcclxuICAgICAgICAgICAgICAgIGlmKHNoaXBzQXJyLmV2ZXJ5KGVsZW0gPT4gYm9yZGVySG9yaXpvbnRhbC5pbmNsdWRlcyhlbGVtKSBcclxuICAgICAgICAgICAgICAgIHx8IGJvcmRlclZlcnRpY2FsLmluY2x1ZGVzKGVsZW0pKSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBpZighKGkgPT09IHNob3J0ZWRTaGlwc0Fyci5sZW5ndGggfHwgaSA9PT0gMCkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBubyBvdmVybGFwcGluZyBvZiBzaGlwc1xyXG4gICAgICAgICAgICBpZih0aGlzLmhhc1NoaXBBcnJheS5pbmNsdWRlcyhzaGlwc0FycltpXSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWRkcyBzaGlwIHRvIGZyZXNoIGxvY2F0aW9uXHJcbiAgICAgICAgdGhpcy5oYXNTaGlwQXJyYXkucHVzaCguLi5zaG9ydGVkU2hpcHNBcnIpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHYW1lQm9hcmQiLCJpbXBvcnQgR2FtZUJvYXJkIGZyb20gXCIuL2dhbWVCb2FyZFwiO1xyXG5cclxuY2xhc3MgUGxheWVye1xyXG4gICAgY29uc3RydWN0b3IobmFtZSl7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnNoaXBzID0gW107XHJcbiAgICAgICAgdGhpcy5ib2FyZCA9IG5ldyBHYW1lQm9hcmQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBsYXllciIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoaXBze1xyXG4gICAgY29uc3RydWN0b3IobmFtZSxsZW5ndGgscG9zaXRpb24sIGhpdHMgPSAwKXtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB0aGlzLmhpdHMgPSBoaXRzO1xyXG4gICAgICAgIHRoaXMuaGFzU3Vua2VuID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaGl0KHBvc2l0aW9uKXsvLyBoaXRzIHRoZSBwb3NpdGlvbiBhbmQgcmVtb3ZlcyB0aGUgcG9zaXRpb24gZnJvbSB0aGUgYXJyYXlcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnNwbGljZSh0aGlzLnBvc2l0aW9uLmluZGV4T2YocG9zaXRpb24pLDEpO1xyXG4gICAgICAgIHRoaXMuaGl0cysrO1xyXG4gICAgICAgIHRoaXMuaXNTdW5rKHRoaXMuaGl0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTdW5rKCl7Ly8gb25jZSBhbGwgaGl0IGl0IHNpbmtzXHJcbiAgICAgICAgaWYodGhpcy5wb3NpdGlvbi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5oYXNTdW5rZW4gPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUGxheWVyIGZyb20gXCIuLi9tb2R1bGVzL3BsYXllclwiXHJcbmltcG9ydCBTaGlwcyBmcm9tIFwiLi4vbW9kdWxlcy9zaGlwXCJcclxuaW1wb3J0IGdhbWVCb2FyZCBmcm9tIFwiLi9nYW1lQm9hcmRcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGlwcygpe1xyXG4gICAgZ2FtZUJvYXJkKCk7XHJcbiAgICBjb25zdCBwbGF5ZXIgPSBuZXcgUGxheWVyKFwicGxheWVyXCIpO1xyXG4gICAgY29uc3QgY29tcHV0ZXIgPSBuZXcgUGxheWVyKFwiY29tcHV0ZXJcIik7XHJcblxyXG4gICAgY29uc3QgY2FycmllciA9IG5ldyBTaGlwcyhcImNhcnJpZXJcIiwgNSwgMSwgWzAsMSwyLDMsNF0pO1xyXG4gICAgcGxheWVyLnNoaXBzLnB1c2goY2Fycmllcik7XHJcbiAgICBjb25zdCBiYXR0bGVTaGlwID0gbmV3IFNoaXBzKFwiYmF0dGxlc2hpcFwiLCA0LCAyLCBbODAsODEsODIsODNdKVxyXG4gICAgcGxheWVyLnNoaXBzLnB1c2goYmF0dGxlU2hpcCk7XHJcbiAgICBjb25zdCBkZXN0cm95ZXIgPSBuZXcgU2hpcHMoXCJiYXR0bGVzaGlwXCIsIDMsIDIsIFs5MCw5MSw5Ml0pXHJcbiAgICBwbGF5ZXIuc2hpcHMucHVzaChkZXN0cm95ZXIpXHJcbiAgICBjb25zdCBwYXRyb2xCb2F0ID0gbmV3IFNoaXBzKFwiYmF0dGxlc2hpcFwiLCAyLCAyLCBbMjEsMTFdKVxyXG4gICAgcGxheWVyLnNoaXBzLnB1c2gocGF0cm9sQm9hdCk7XHJcblxyXG4gICAgcGxheWVyLmJvYXJkLnNoaXBzUGxhY2VtZW50KHBsYXllci5zaGlwc1swXS5wb3NpdGlvbik7XHJcbiAgICBwbGF5ZXIuYm9hcmQuc2hpcHNQbGFjZW1lbnQocGxheWVyLnNoaXBzWzFdLnBvc2l0aW9uKTtcclxuICAgIHBsYXllci5ib2FyZC5zaGlwc1BsYWNlbWVudChwbGF5ZXIuc2hpcHNbMl0ucG9zaXRpb24pO1xyXG4gICAgcGxheWVyLmJvYXJkLnNoaXBzUGxhY2VtZW50KHBsYXllci5zaGlwc1szXS5wb3NpdGlvbik7XHJcbiAgICBjb25zb2xlLmxvZyhwbGF5ZXIpXHJcblxyXG4gICAgY29uc3QgZ3JpZEl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBsYXllci0xIC5ncmlkLWl0ZW1cIik7XHJcbiAgICBncmlkSXRlbS5mb3JFYWNoKChncmlkKT0+e1xyXG4gICAgICAgIGlmKHBsYXllci5ib2FyZC5oYXNTaGlwQXJyYXkuaW5jbHVkZXMocGFyc2VJbnQoZ3JpZC5pZCwgMTApKSl7XHJcbiAgICAgICAgICAgIGdyaWQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnYW1lQm9hcmQoKXtcclxuICAgIGZ1bmN0aW9uIG1ha2VSb3dzKGRpdixyb3dzID0gMTAsIGNvbHM9MTApIHtcclxuICAgICAgICBkaXYuc3R5bGUuc2V0UHJvcGVydHkoXCItLWdyaWQtcm93c1wiLCByb3dzKTtcclxuICAgICAgICBkaXYuc3R5bGUuc2V0UHJvcGVydHkoXCItLWdyaWQtY29sc1wiLCBjb2xzKTtcclxuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IChyb3dzICogY29scyk7IGMrKykge1xyXG4gICAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJncmlkLWl0ZW1cIik7XHJcbiAgICAgICAgICBjZWxsLmlkID0gYztcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc3QgcGxheWVyT25lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXItMVwiKTtcclxuICAgIGNvbnN0IHBsYXllclR3byA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxheWVyLTJcIik7XHJcbiAgICBcclxuICAgIG1ha2VSb3dzKHBsYXllck9uZSk7XHJcbiAgICBtYWtlUm93cyhwbGF5ZXJUd28pO1xyXG59IiwiaW1wb3J0IHNoaXBzICBmcm9tIFwiLi9nYW1lQ3JlYXRpb24vc2hpcFBsYWNlbWVudFwiO1xyXG5cclxuc2hpcHMoKSJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0aGlzIiwic2hpcHMiLCJib2FyZCIsImJvYXJkUG9zaXRpb25BcnJheSIsImhhc1NoaXBBcnJheSIsImJvYXJkQ3JlYXRlIiwiaSIsInB1c2giLCJyZWNlaXZlQXR0YWNrIiwicG9zIiwiaW5jbHVkZXMiLCJzcGxpY2UiLCJjaGVja2luZ0lmSGl0IiwiaW5kZXhPZiIsImdhbWVFbmQiLCJsZW5ndGgiLCJzaGlwc1BsYWNlbWVudCIsInNoaXBzQXJyIiwic2hvcnRlZFNoaXBzQXJyIiwic29ydCIsImEiLCJiIiwiYm9yZGVySG9yaXpvbnRhbCIsImJvcmRlclZlcnRpY2FsIiwiZXZlcnkiLCJlbGVtIiwiU2hpcHMiLCJwb3NpdGlvbiIsImhpdHMiLCJoYXNTdW5rZW4iLCJoaXQiLCJpc1N1bmsiLCJtYWtlUm93cyIsImRpdiIsInJvd3MiLCJjb2xzIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImMiLCJjZWxsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjbGFzc0xpc3QiLCJhZGQiLCJpZCIsInBsYXllck9uZSIsInF1ZXJ5U2VsZWN0b3IiLCJwbGF5ZXJUd28iLCJwbGF5ZXIiLCJjYXJyaWVyIiwiYmF0dGxlU2hpcCIsImRlc3Ryb3llciIsInBhdHJvbEJvYXQiLCJjb25zb2xlIiwibG9nIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJncmlkIiwicGFyc2VJbnQiLCJiYWNrZ3JvdW5kQ29sb3IiXSwic291cmNlUm9vdCI6IiJ9