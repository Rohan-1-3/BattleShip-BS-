(()=>{"use strict";const e=class{constructor(e){this.name=e,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let e=0;e<100;e++)this.boardPositionArray.push(e)}receiveAttack(e){return this.boardPositionArray.includes(e)?(this.boardPositionArray.includes(e)&&this.boardPositionArray.splice(e,1),this.checkingIfHit(e)):"out of the box"}checkingIfHit(e){return!!this.hasShipArray.includes(e)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(e),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(e){const t=e.sort(((e,t)=>e-t)),r=[9,19,29,39,49,59,69,79,89,99],s=[90,91,92,93,94,95,96,97,98,99];for(let o=0;o<t.length-1;o++){if(e[o]<0)return!1;if(!this.boardPositionArray.includes(t[o]))return!1;if(this.hasShipArray.includes(e[o]))return!1;if(this.hasShipArray.includes(e[t.length-1]))return!1;if(t[o+1]-t[o]!=1&&t[o+1]-t[o]!=10)return!1;if(r.includes(t[o])||s.includes(t[o])){if(e.every((e=>r.includes(e)||s.includes(e))))break;if(o!==t.length||0!==o)return!1}}return this.hasShipArray.push(...t),!0}}}};class t{constructor(e,t,r,s=0){this.name=e,this.length=t,this.position=r,this.hits=s,this.hasSunken=!1}hit(e){this.position.splice(this.position.indexOf(e),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}const r=new e("player"),s=new e("computer"),o=document.querySelector(".game-start");!function(){!function(){function e(e,t=10,r=10){e.style.setProperty("--grid-rows",t),e.style.setProperty("--grid-cols",r);for(let s=0;s<t*r;s++){const t=document.createElement("div");e.appendChild(t),t.classList.add("grid-item"),t.id=s}}const t=document.querySelector(".player-1"),r=document.querySelector(".player-2");e(t),e(r)}();const e=(t,r)=>{const s=Math.floor(100*Math.random()),o=[],i=[1,10,1,10,10,1,10,1],n=i[Math.floor(Math.random()*i.length)];for(let e=0;e<t;e++)o.push(s+e*n);return r.board.shipsPlacement(o)?o:e(t,r)},i=document.querySelector(".player-2");i.style.pointerEvents="none";const n=document.querySelector(".randomPlayer");n.addEventListener("click",(()=>{(()=>{r.ships=[],r.board.hasShipArray=[];const s=document.querySelectorAll(".player-1 .grid-item");s.forEach((e=>{e.style.backgroundColor="white"}));let o=5;for(let s=0;s<5;s++){const i=new t(`ship${s}`,o,e(o,r));r.ships.push(i),2!==o&&o--}for(let e=0;e<5;e++)0===e&&(r.board.hasShipArray=[]),r.board.shipsPlacement(r.ships[e].position);s.forEach((e=>{r.board.hasShipArray.includes(parseInt(e.id,10))&&(e.style.backgroundColor="green")}))})()})),o.addEventListener("click",(()=>{(()=>{document.querySelector(".player-1").classList.add("turn");let r=5;for(let o=0;o<5;o++){const i=new t(`ship${o}`,r,e(r,s));s.ships.push(i),2!==r&&r--}for(let e=0;e<5;e++)0===e&&(s.board.hasShipArray=[]),s.board.shipsPlacement(s.ships[e].position)})(),n.disabled=!0,i.style.pointerEvents="all"}))}(),function(){const e=e=>0===e.board.hasShipArray.length&&(document.querySelector(".game").style.pointerEvents="none",console.log(`${e.name} Lost`),!0),t=[],o=[],i=document.querySelector(".player-1"),n=document.querySelector(".player-2");document.querySelectorAll(".player-2 .grid-item").forEach((a=>{a.addEventListener("click",(()=>{const l=parseFloat(a.id);if(!t.includes(l)){t.push(l);const c=s.board.hasShipArray;if(c.includes(l)){if(a.style.backgroundColor="red",c.splice(c.indexOf(l),1),e(s))return 0}else a.style.backgroundColor="yellow";n.classList.add("turn"),i.classList.remove("turn"),setTimeout((()=>{(()=>{const t=Math.floor(Math.random()*r.board.boardPositionArray.length),s=r.board.boardPositionArray[t];if(r.board.boardPositionArray.splice(t,1),!o.includes(s)){const t=document.getElementById(`${s}`);o.push(s);const a=r.board.hasShipArray;if(a.includes(s)){if(t.style.backgroundColor="red",a.splice(a.indexOf(s),1),e(r))return 0}else t.style.backgroundColor="yellow";i.classList.add("turn"),n.classList.remove("turn")}})()}),1e3)}return 0}))}))}(),function(){const e=document.querySelectorAll(".player-1 .grid-item");console.log("ok");let s=5,i=0;e.forEach((n=>{n.addEventListener("click",(()=>{const a=[];for(let e=0;e<s;e++){const t=parseInt(n.id,10)+e;a.push(t)}if(!r.board.shipsPlacement(a))return!1;const l=new t(`ship-${i}`,s,a);return r.ships.push(l),console.log(r),e.forEach((e=>{r.board.hasShipArray.includes(parseInt(e.id,10))&&e.classList.add("green")})),i++,5===i&&o.click(),2===s?0:(s--,!0)})),n.addEventListener("mouseover",(()=>{if("green"===n.classList[1])return!1;for(let e=1;e<s;e++){const t=document.getElementById(`${parseInt(n.id,10)+e}`);if("green"===t.classList[1])return!1;t.style.backgroundColor="green"}n.style.backgroundColor="green"})),n.addEventListener("mouseleave",(()=>{if("green"===n.classList[1])return!1;for(let e=1;e<5;e++){const t=document.getElementById(`${parseInt(n.id,10)+e}`);if("green"===t.classList[1])return!1;t.style.backgroundColor="white"}n.style.backgroundColor="white"}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dEJJLEVBQUtyQixVQUFVLEdBQWdCLE9BQU8sRUFDekMsSUFBSSxJQUFJeEMsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQUksQ0FDdEIsTUFBTXFGLEVBQVd6RCxTQUFTbUQsZUFBZSxHQUFHZixTQUFTSCxFQUFLbkIsR0FBSSxJQUFJMUMsS0FDbEUsR0FBNkIsVUFBMUJxRixFQUFTN0MsVUFBVSxHQUFnQixPQUFPLEVBQzdDNkMsRUFBU25ELE1BQU00QixnQkFBa0IsT0FDckMsQ0FFQUQsRUFBSzNCLE1BQU00QixnQkFBa0IsT0FBTyxHQUN0QyxHQUVWLENGakRBd0IsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9nYW1lQm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvc2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVDcmVhdGlvbi9zaGlwUGxhY2VtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZUNyZWF0aW9uL2dhbWVCb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZUNyZWF0aW9uL2hpdEdhbWVCb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVDcmVhdGlvbi9tYW51YWxTaGlwc1BsYWNlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBHYW1lQm9hcmR7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMuYm9hcmRQb3NpdGlvbkFycmF5ID0gW107XHJcbiAgICAgICAgdGhpcy5oYXNTaGlwQXJyYXkgPSBbXTtcclxuICAgICAgICB0aGlzLmJvYXJkQ3JlYXRlKCk7Ly8gaW5zdGFudGx5IGNyZWF0ZXMgYSBib2FyZFxyXG4gICAgfVxyXG5cclxuICAgIGJvYXJkQ3JlYXRlKCl7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDtpPDEwMDtpKyspe1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkUG9zaXRpb25BcnJheS5wdXNoKGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZWNlaXZlQXR0YWNrKHBvcyl7Ly8gcmVjZWl2ZXMgYXR0YWNrIGFuZCBtYXJrcyBpZiBoaXQgb3IgbWlzc1xyXG4gICAgICAgIGlmKCF0aGlzLmJvYXJkUG9zaXRpb25BcnJheS5pbmNsdWRlcyhwb3MpKSByZXR1cm4gXCJvdXQgb2YgdGhlIGJveFwiO1xyXG4gICAgICAgIGlmKHRoaXMuYm9hcmRQb3NpdGlvbkFycmF5LmluY2x1ZGVzKHBvcykpe1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkUG9zaXRpb25BcnJheS5zcGxpY2UocG9zLDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja2luZ0lmSGl0KHBvcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tpbmdJZkhpdChwb3Mpe1xyXG4gICAgICAgIGlmKHRoaXMuaGFzU2hpcEFycmF5LmluY2x1ZGVzKHBvcykpey8vIGNoZWNraW5nIGhpdCwgaWYgaGl0IHJlbW92ZXMgYmxvY2sgZnJvbSBzaGlwQXJyYXlcclxuICAgICAgICAgICAgdGhpcy5oYXNTaGlwQXJyYXkuc3BsaWNlKHRoaXMuaGFzU2hpcEFycmF5LmluZGV4T2YocG9zKSwxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBnYW1lRW5kKCl7Ly8gY2hlY2sgaWYgYWxsIHNoaXBzIHN1bmtcclxuICAgICAgICByZXR1cm4gISEodGhpcy5oYXNTaGlwQXJyYXkubGVuZ3RoID09PSAwKTtcclxuICAgIH1cclxuXHJcbiAgICBzaGlwc1BsYWNlbWVudChzaGlwc0Fycil7XHJcbiAgICAgICAgY29uc3Qgc2hvcnRlZFNoaXBzQXJyID0gc2hpcHNBcnIuc29ydCgoYSwgYikgPT5hIC0gYik7Ly8gc29ydGluZ1xyXG4gICAgICAgIC8vIGJvcmRlciBvZiB0aGUgYm9hcmRcclxuICAgICAgICBjb25zdCBib3JkZXJIb3Jpem9udGFsID0gWzksMTksMjksMzksNDksNTksNjksNzksODksOTldO1xyXG4gICAgICAgIGNvbnN0IGJvcmRlclZlcnRpY2FsID0gWzkwLDkxLDkyLDkzLDk0LDk1LDk2LDk3LDk4LDk5XTtcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hvcnRlZFNoaXBzQXJyLmxlbmd0aC0xO2krKyl7XHJcbiAgICAgICAgICAgIC8vIHBsYWNlbWVudCBiZXlvbmQgYm9hcmRcclxuICAgICAgICAgICAgaWYoc2hpcHNBcnJbaV08MCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmJvYXJkUG9zaXRpb25BcnJheS5pbmNsdWRlcyhzaG9ydGVkU2hpcHNBcnJbaV0pKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIG5vIG92ZXJsYXBwaW5nIG9mIHNoaXBzXHJcbiAgICAgICAgICAgIGlmKHRoaXMuaGFzU2hpcEFycmF5LmluY2x1ZGVzKHNoaXBzQXJyW2ldKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZih0aGlzLmhhc1NoaXBBcnJheS5pbmNsdWRlcyhzaGlwc0FycltzaG9ydGVkU2hpcHNBcnIubGVuZ3RoLTFdKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBwbGFjZW1lbnQgaW4gcmFuZG9tIG9yZGVyXHJcbiAgICAgICAgICAgIGlmKCEoKHNob3J0ZWRTaGlwc0FycltpKzFdIC0gc2hvcnRlZFNoaXBzQXJyW2ldKSA9PT0gMSBcclxuICAgICAgICAgICAgfHwgKHNob3J0ZWRTaGlwc0FycltpKzFdIC0gc2hvcnRlZFNoaXBzQXJyW2ldKSA9PT0gMTApKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIHBsYWNlbWVudCBjcm9zc2VzIHRoZSB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRvbCBib3JkZXJcclxuICAgICAgICAgICAgaWYoYm9yZGVySG9yaXpvbnRhbC5pbmNsdWRlcyhzaG9ydGVkU2hpcHNBcnJbaV0pIFxyXG4gICAgICAgICAgICB8fCBib3JkZXJWZXJ0aWNhbC5pbmNsdWRlcyhzaG9ydGVkU2hpcHNBcnJbaV0pKXtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoc2hpcHNBcnIuZXZlcnkoZWxlbSA9PiBib3JkZXJIb3Jpem9udGFsLmluY2x1ZGVzKGVsZW0pIFxyXG4gICAgICAgICAgICAgICAgfHwgYm9yZGVyVmVydGljYWwuaW5jbHVkZXMoZWxlbSkpKSBicmVhaztcclxuICAgICAgICAgICAgICAgIGlmKCEoaSA9PT0gc2hvcnRlZFNoaXBzQXJyLmxlbmd0aCAmJiBpID09PSAwKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFkZHMgc2hpcCB0byBmcmVzaCBsb2NhdGlvblxyXG4gICAgICAgIHRoaXMuaGFzU2hpcEFycmF5LnB1c2goLi4uc2hvcnRlZFNoaXBzQXJyKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZUJvYXJkIiwiaW1wb3J0IEdhbWVCb2FyZCBmcm9tIFwiLi9nYW1lQm9hcmRcIjtcclxuXHJcbmNsYXNzIFBsYXllcntcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpe1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5zaGlwcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYm9hcmQgPSBuZXcgR2FtZUJvYXJkO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXIiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTaGlwc3tcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsbGVuZ3RoLHBvc2l0aW9uLCBoaXRzID0gMCl7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgICAgdGhpcy5oaXRzID0gaGl0cztcclxuICAgICAgICB0aGlzLmhhc1N1bmtlbiA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGhpdChwb3NpdGlvbil7Ly8gaGl0cyB0aGUgcG9zaXRpb24gYW5kIHJlbW92ZXMgdGhlIHBvc2l0aW9uIGZyb20gdGhlIGFycmF5XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi5zcGxpY2UodGhpcy5wb3NpdGlvbi5pbmRleE9mKHBvc2l0aW9uKSwxKTtcclxuICAgICAgICB0aGlzLmhpdHMrKztcclxuICAgICAgICB0aGlzLmlzU3Vuayh0aGlzLmhpdHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzU3Vuaygpey8vIG9uY2UgYWxsIGhpdCBpdCBzaW5rc1xyXG4gICAgICAgIGlmKHRoaXMucG9zaXRpb24ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzU3Vua2VuID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tY29udGludWUgKi9cclxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cclxuaW1wb3J0IFBsYXllciBmcm9tIFwiLi4vbW9kdWxlcy9wbGF5ZXJcIlxyXG5pbXBvcnQgU2hpcHMgZnJvbSBcIi4uL21vZHVsZXMvc2hpcFwiXHJcbmltcG9ydCBnYW1lQm9hcmQgZnJvbSBcIi4vZ2FtZUJvYXJkXCI7XHJcblxyXG4vLyB0d28gbmV3IHBsYXllcnMgY3JlYXRlZFxyXG5jb25zdCBwbGF5ZXIgPSBuZXcgUGxheWVyKFwicGxheWVyXCIpO1xyXG5jb25zdCBjb21wdXRlciA9IG5ldyBQbGF5ZXIoXCJjb21wdXRlclwiKTtcclxuY29uc3Qgc3RhcnRHYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5nYW1lLXN0YXJ0XCIpO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGlwcygpe1xyXG4gICAgZ2FtZUJvYXJkKCk7Ly8gYm94IGFyZWEgZm9yIGJvdGggcGxheWVyc1xyXG5cclxuICAgIGNvbnN0IGdldFJhbmRvbUxlZ2FsUG9zaXRpb24gPSAoaiwgcGVyc29uKT0+e1xyXG4gICAgICAgIGNvbnN0IHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCk7XHJcbiAgICAgICAgY29uc3QgbmV3QXJyYXkgPSBbXTtcclxuICAgICAgICBjb25zdCBhZGRpbmdBcnJheSA9IFsxLDEwLDEsMTAsMTAsMSwxMCwxXTtcclxuICAgICAgICBjb25zdCBhZGRpbmdEaWdpdCA9IGFkZGluZ0FycmF5W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSphZGRpbmdBcnJheS5sZW5ndGgpXTtcclxuICAgICAgICBmb3IobGV0IGkgPSAwO2kgPCBqO2krKyl7XHJcbiAgICAgICAgICAgIG5ld0FycmF5LnB1c2gocmFuZG9tTnVtYmVyKyhpICogYWRkaW5nRGlnaXQpKTsvLyBhIHJhbmRvbSBudW1iZXIgYW5kIG1ha2UgYSBzZXJpYWxpc2VkIGFycmF5IG9mIGl0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHBlcnNvbi5ib2FyZC5zaGlwc1BsYWNlbWVudChuZXdBcnJheSkpIHJldHVybiBuZXdBcnJheTsvLyBpZiBwbGFjZW1lbnQgaXQgY29ycmVjdCByZXR1cm5zXHJcbiAgICAgICAgcmV0dXJuIGdldFJhbmRvbUxlZ2FsUG9zaXRpb24oaiwgcGVyc29uKTsvLyBpZiBub3QgcmVjdXJzaXZlIGZ1bmN0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcGxheWVyU2hpcHMgPSAoKT0+ey8vIGNyZWF0ZXMgc2hpcHMgZm9yIHBsYXllciBhdCByYW5kb20gcGxhY2VzXHJcbiAgICAgICAgcGxheWVyLnNoaXBzID0gW107XHJcbiAgICAgICAgcGxheWVyLmJvYXJkLmhhc1NoaXBBcnJheSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGdyaWRJdGVtUGxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wbGF5ZXItMSAuZ3JpZC1pdGVtXCIpO1xyXG4gICAgICAgIGdyaWRJdGVtUGxheWVyLmZvckVhY2goKGdyaWQpPT57XHJcbiAgICAgICAgICAgIGdyaWQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgbGV0IGogPSA1O1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7aSA8IDU7aSsrKXtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyU2hpcCA9IG5ldyBTaGlwcyhgc2hpcCR7aX1gLGosIGdldFJhbmRvbUxlZ2FsUG9zaXRpb24oaiwgcGxheWVyKSk7XHJcbiAgICAgICAgICAgIHBsYXllci5zaGlwcy5wdXNoKHBsYXllclNoaXApO1xyXG4gICAgICAgICAgICAvLyBubyBzaGlwcyBsZXNzIHRoYW4gMiBpbiBzaXplXHJcbiAgICAgICAgICAgIGlmKGogPT09IDIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBqLS07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IobGV0IGkgPTA7IGk8NTtpKyspe1xyXG4gICAgICAgICAgICBpZihpPT09MCkgcGxheWVyLmJvYXJkLmhhc1NoaXBBcnJheSA9IFtdOy8vIGNsZWFyaW5nIHRoZSBzaGlwIGFycmF5XHJcbiAgICAgICAgICAgIHBsYXllci5ib2FyZC5zaGlwc1BsYWNlbWVudChwbGF5ZXIuc2hpcHNbaV0ucG9zaXRpb24pOy8vIGZpbGxpbmcgaXQgd2l0aCBwcm9wZXIgcGxhY2VtZW50c1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ3JpZEl0ZW1QbGF5ZXIuZm9yRWFjaCgoZ3JpZCk9PnsvLyBzaG93aW5nIHRoZSBwbGF5ZXIncyBzaGlwIGxvY2F0aW9uXHJcbiAgICAgICAgaWYocGxheWVyLmJvYXJkLmhhc1NoaXBBcnJheS5pbmNsdWRlcyhwYXJzZUludChncmlkLmlkLCAxMCkpKXtcclxuICAgICAgICAgICAgZ3JpZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29tcHV0ZXJTaGlwcyA9ICgpPT57XHJcbiAgICAgICAgY29uc3QgcGxheWVyT25lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXItMVwiKTtcclxuICAgICAgICBwbGF5ZXJPbmUuY2xhc3NMaXN0LmFkZChcInR1cm5cIik7IC8vIGRpc2JhbGluZyBET00gZm9yIG9wcG9zaXRlIHBsYXllclxyXG4gICAgICAgIGxldCBqID0gNTtcclxuICAgICAgICBmb3IobGV0IGkgPSAwO2kgPCA1O2krKyl7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBTaGlwID0gbmV3IFNoaXBzKGBzaGlwJHtpfWAsaiwgZ2V0UmFuZG9tTGVnYWxQb3NpdGlvbihqLCBjb21wdXRlcikpXHJcbiAgICAgICAgICAgIGNvbXB1dGVyLnNoaXBzLnB1c2goY29tcFNoaXApO1xyXG4gICAgICAgICAgICBpZihqID09PSAyKSBjb250aW51ZTtcclxuICAgICAgICAgICAgai0tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGxldCBpID0wIDsgaTw1O2krKyl7XHJcbiAgICAgICAgICAgIGlmKGk9PT0wKSBjb21wdXRlci5ib2FyZC5oYXNTaGlwQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgY29tcHV0ZXIuYm9hcmQuc2hpcHNQbGFjZW1lbnQoY29tcHV0ZXIuc2hpcHNbaV0ucG9zaXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwbGF5ZXJUd28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYXllci0yXCIpO1xyXG4gICAgcGxheWVyVHdvLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcclxuICAgIC8vIGNyZWF0aW5nIHNoaXBzIHJhbmRvbWx5XHJcbiAgICBjb25zdCByYW5kb21pc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJhbmRvbVBsYXllclwiKTtcclxuICAgIHJhbmRvbWlzZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCk9PntcclxuICAgICAgICBwbGF5ZXJTaGlwcygpO1xyXG4gICAgfSlcclxuICAgIHN0YXJ0R2FtZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCk9PntcclxuICAgICAgICBjb21wdXRlclNoaXBzKCk7XHJcbiAgICAgICAgcmFuZG9taXNlLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBwbGF5ZXJUd28uc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiYWxsXCI7XHJcbiAgICB9KVxyXG4gICAgXHJcbn1cclxuXHJcbmV4cG9ydCB7cGxheWVyLCBjb21wdXRlciwgc3RhcnRHYW1lfSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdhbWVCb2FyZCgpe1xyXG4gICAgZnVuY3Rpb24gbWFrZVJvd3MoZGl2LHJvd3MgPSAxMCwgY29scz0xMCkge1xyXG4gICAgICAgIGRpdi5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tZ3JpZC1yb3dzXCIsIHJvd3MpO1xyXG4gICAgICAgIGRpdi5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tZ3JpZC1jb2xzXCIsIGNvbHMpO1xyXG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgKHJvd3MgKiBjb2xzKTsgYysrKSB7XHJcbiAgICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChjZWxsKTtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImdyaWQtaXRlbVwiKTtcclxuICAgICAgICAgIGNlbGwuaWQgPSBjO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBjb25zdCBwbGF5ZXJPbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYXllci0xXCIpO1xyXG4gICAgY29uc3QgcGxheWVyVHdvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXItMlwiKTtcclxuICAgIC8vIGNyZWF0ZXMgMTB4MTAgYm94IGZvciBib3RoIHBsYXllcnNcclxuICAgIG1ha2VSb3dzKHBsYXllck9uZSk7XHJcbiAgICBtYWtlUm93cyhwbGF5ZXJUd28pO1xyXG59IiwiaW1wb3J0IGhpdEJvYXJkIGZyb20gXCIuL2dhbWVDcmVhdGlvbi9oaXRHYW1lQm9hcmRcIjtcclxuaW1wb3J0IHNvbWVGdW5jdGlvbiBmcm9tIFwiLi9nYW1lQ3JlYXRpb24vbWFudWFsU2hpcHNQbGFjZW1lbnRcIjtcclxuaW1wb3J0IHNoaXBzICBmcm9tIFwiLi9nYW1lQ3JlYXRpb24vc2hpcFBsYWNlbWVudFwiO1xyXG5cclxuXHJcbnNoaXBzKCk7XHJcbmhpdEJvYXJkKCk7XHJcbnNvbWVGdW5jdGlvbigpO1xyXG5cclxuXHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXHJcbmltcG9ydCB7IGNvbXB1dGVyLCBwbGF5ZXIgfSBmcm9tIFwiLi9zaGlwUGxhY2VtZW50XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoaXRCb2FyZCgpe1xyXG5cclxuICAgIGNvbnN0IGNoZWNrR2FtZUVuZCA9IChwZXJzb24pPT57XHJcbiAgICAgICAgaWYocGVyc29uLmJvYXJkLmhhc1NoaXBBcnJheS5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5nYW1lXCIpO1xyXG4gICAgICAgICAgICBtYWluLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjsgLy8gYWZ0ZXIgZ2FtZSBlbmRzIERPTSBhbGxvd2VkXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3BlcnNvbi5uYW1lfSBMb3N0YCk7IC8vIGlkaXNwbGF5c1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBhcnJheSBmb3IgcmVjb3JkaW5nIHNob3RzXHJcbiAgICBjb25zdCBzaG90c0FycmF5ID0gW107XHJcbiAgICBjb25zdCBzaG90c0FycmF5Q29tcCA9IFtdO1xyXG4gICAgY29uc3QgcGxheWVyT25lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXItMVwiKTtcclxuICAgIGNvbnN0IHBsYXllclR3byA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxheWVyLTJcIik7XHJcbiAgXHJcbiAgICBcclxuXHJcbiAgICBjb25zdCBjb21wdXRlclBsYXkgPSAoKT0+ey8vIHJhbmRvbSBjb21wdXRlciBwbGF5c1xyXG4gICAgICAgIGNvbnN0IHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpwbGF5ZXIuYm9hcmQuYm9hcmRQb3NpdGlvbkFycmF5Lmxlbmd0aClcclxuICAgICAgICBjb25zdCBwb3MgPSBwbGF5ZXIuYm9hcmQuYm9hcmRQb3NpdGlvbkFycmF5W3JhbmRvbU51bWJlcl07XHJcbiAgICAgICAgLy8gcmVtb3ZlcyB0aGUgcG9zaXRpb24gZnJvbSBwbGF5ZXJzIGJvYXJkIGFmdGVyIHNob3RzXHJcbiAgICAgICAgcGxheWVyLmJvYXJkLmJvYXJkUG9zaXRpb25BcnJheS5zcGxpY2UocmFuZG9tTnVtYmVyLCAxKTtcclxuICAgICAgICAgICAgaWYoIShzaG90c0FycmF5Q29tcC5pbmNsdWRlcyhwb3MpKSl7Ly8gbm8gaGl0dGluZyBzYW1lIHBvc2l0aW9uIHR3aWNlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7cG9zfWApO1xyXG4gICAgICAgICAgICAgICAgc2hvdHNBcnJheUNvbXAucHVzaChwb3MpOy8vIHB1c2hpbmcgaGl0IHBvc2l0aW9uIHRvIGFycmF5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwQXJyYXkgPSBwbGF5ZXIuYm9hcmQuaGFzU2hpcEFycmF5O1xyXG4gICAgICAgICAgICAgICAgaWYoc2hpcEFycmF5LmluY2x1ZGVzKHBvcykpey8vIGlmIHNoaXAgZ2V0cyBoaXQgZGl2IGNvbG9yIGNoYW5nZXMgdG8gcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoaXBBcnJheS5zcGxpY2Uoc2hpcEFycmF5LmluZGV4T2YocG9zKSwxKTsgLy8gcmVtb3ZlcyBwb3NpdGlvbiBmcm9tIHNoaXBBcnJheVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNoZWNrR2FtZUVuZChwbGF5ZXIpKSByZXR1cm4gMDsvLyBpZiBnYW1lIGVuZHMgbm8gc3dpdGNoaW5nIHR1cm5zXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNley8vIGlmIG5vdCBoaXQgZGl2IGNobmFnZXMgdG8geWVsbG93XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInllbGxvd1wiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlcyB0dXJuIHRvIG90aGVyIHBsYXllclxyXG4gICAgICAgICAgICAgICAgcGxheWVyT25lLmNsYXNzTGlzdC5hZGQoXCJ0dXJuXCIpO1xyXG4gICAgICAgICAgICAgICAgcGxheWVyVHdvLmNsYXNzTGlzdC5yZW1vdmUoXCJ0dXJuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdyaWRJdGVtQ29tcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucGxheWVyLTIgLmdyaWQtaXRlbVwiKTtcclxuICAgIGdyaWRJdGVtQ29tcC5mb3JFYWNoKChpdGVtKT0+e1xyXG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT57XHJcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IHBhcnNlRmxvYXQoaXRlbS5pZCk7XHJcbiAgICAgICAgICAgIGlmKCEoc2hvdHNBcnJheS5pbmNsdWRlcyhwb3MpKSl7Ly8gY2FuJ3QgaGl0IHNhbWUgcG9zaXRpb24gdHdpY2VcclxuICAgICAgICAgICAgICAgIHNob3RzQXJyYXkucHVzaChwb3MpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2hpcEFycmF5ID0gY29tcHV0ZXIuYm9hcmQuaGFzU2hpcEFycmF5O1xyXG4gICAgICAgICAgICAgICAgaWYoc2hpcEFycmF5LmluY2x1ZGVzKHBvcykpe1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjsvLyBoaXQgc2lnbmFsbGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIHNoaXBBcnJheS5zcGxpY2Uoc2hpcEFycmF5LmluZGV4T2YocG9zKSwxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihjaGVja0dhbWVFbmQoY29tcHV0ZXIpKSByZXR1cm4gMDsvLyBpZiBnYW1lIGVuZHMgbm8gc3dpdGNoaW5nIHR1cm5zXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ5ZWxsb3dcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHR1cm4gc3dpdGNoaW5nXHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJUd28uY2xhc3NMaXN0LmFkZChcInR1cm5cIik7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJPbmUuY2xhc3NMaXN0LnJlbW92ZShcInR1cm5cIik7XHJcbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlciBhdHRhY2tzIGFmdGVyIDEgc2VjXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wdXRlclBsYXkoKTtcclxuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59IiwiaW1wb3J0IFNoaXBzIGZyb20gXCIuLi9tb2R1bGVzL3NoaXBcIjtcclxuaW1wb3J0IHsgcGxheWVyLCBzdGFydEdhbWUgfSBmcm9tIFwiLi9zaGlwUGxhY2VtZW50XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb21lRnVuY3Rpb24oKXtcclxuICAgIGNvbnN0IGdyaWRJdGVtUGxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wbGF5ZXItMSAuZ3JpZC1pdGVtXCIpO1xyXG4gICAgY29uc29sZS5sb2coXCJva1wiKVxyXG4gICAgbGV0IGogPSA1O1xyXG4gICAgbGV0IGNvdW50ID0wO1xyXG4gICAgY29uc3QgYWxsdGhpcyA9ICgpPT57XHJcbiAgICAgICAgZ3JpZEl0ZW1QbGF5ZXIuZm9yRWFjaCgoZ3JpZCk9PntcclxuICAgICAgICAgICAgaWYocGxheWVyLmJvYXJkLmhhc1NoaXBBcnJheS5pbmNsdWRlcyhwYXJzZUludChncmlkLmlkLCAxMCkpKVxyXG4gICAgICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoXCJncmVlblwiKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBncmlkSXRlbVBsYXllci5mb3JFYWNoKChncmlkKT0+e1xyXG4gICAgICAgIGdyaWQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT57XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdXHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7aSA8IGo7aSsrKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FycmF5RWxlbWVudCA9IHBhcnNlSW50KGdyaWQuaWQsIDEwKStpO1xyXG4gICAgICAgICAgICAgICAgbmV3QXJyYXkucHVzaChuZXdBcnJheUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCEocGxheWVyLmJvYXJkLnNoaXBzUGxhY2VtZW50KG5ld0FycmF5KSkpXHJcbiAgICAgICAgICAgIGlmKCEocGxheWVyLmJvYXJkLnNoaXBzUGxhY2VtZW50KG5ld0FycmF5KSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyU2hpcCA9IG5ldyBTaGlwcyhgc2hpcC0ke2NvdW50fWAsIGosIG5ld0FycmF5KVxyXG4gICAgICAgICAgICBwbGF5ZXIuc2hpcHMucHVzaChwbGF5ZXJTaGlwKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocGxheWVyKVxyXG4gICAgICAgICAgICBhbGx0aGlzKCk7XHJcbiAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgIGlmKGNvdW50ID09PSA1KSBzdGFydEdhbWUuY2xpY2soKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGogPT09IDIpIHJldHVybiAwO1xyXG4gICAgICAgICAgICBqLS07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgZ3JpZC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpPT57XHJcbiAgICAgICAgICAgIGlmKGdyaWQuY2xhc3NMaXN0WzFdID09PSBcImdyZWVuXCIpIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgajsgaSsrKXtcclxuICAgICAgICAgICAgY29uc3QgZ3JpZExpbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtwYXJzZUludChncmlkLmlkLCAxMCkraX1gKTtcclxuICAgICAgICAgICAgaWYoZ3JpZExpbmUuY2xhc3NMaXN0WzFdID09PSBcImdyZWVuXCIpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgZ3JpZExpbmUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdyaWQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGdyaWQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgKCk9PntcclxuICAgICAgICAgICAgaWYoZ3JpZC5jbGFzc0xpc3RbMV0gPT09IFwiZ3JlZW5cIikgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCA1OyBpKyspe1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JpZExpbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtwYXJzZUludChncmlkLmlkLCAxMCkraX1gKTtcclxuICAgICAgICAgICAgICAgIGlmKGdyaWRMaW5lLmNsYXNzTGlzdFsxXSA9PT0gXCJncmVlblwiKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBncmlkTGluZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGdyaWQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0iXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJuYW1lIiwidGhpcyIsInNoaXBzIiwiYm9hcmQiLCJib2FyZFBvc2l0aW9uQXJyYXkiLCJoYXNTaGlwQXJyYXkiLCJib2FyZENyZWF0ZSIsImkiLCJwdXNoIiwicmVjZWl2ZUF0dGFjayIsInBvcyIsImluY2x1ZGVzIiwic3BsaWNlIiwiY2hlY2tpbmdJZkhpdCIsImluZGV4T2YiLCJnYW1lRW5kIiwibGVuZ3RoIiwic2hpcHNQbGFjZW1lbnQiLCJzaGlwc0FyciIsInNob3J0ZWRTaGlwc0FyciIsInNvcnQiLCJhIiwiYiIsImJvcmRlckhvcml6b250YWwiLCJib3JkZXJWZXJ0aWNhbCIsImV2ZXJ5IiwiZWxlbSIsIlNoaXBzIiwicG9zaXRpb24iLCJoaXRzIiwiaGFzU3Vua2VuIiwiaGl0IiwiaXNTdW5rIiwiY29tcHV0ZXIiLCJzdGFydEdhbWUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJtYWtlUm93cyIsImRpdiIsInJvd3MiLCJjb2xzIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImMiLCJjZWxsIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiY2xhc3NMaXN0IiwiYWRkIiwiaWQiLCJwbGF5ZXJPbmUiLCJwbGF5ZXJUd28iLCJnZXRSYW5kb21MZWdhbFBvc2l0aW9uIiwiaiIsInBlcnNvbiIsInJhbmRvbU51bWJlciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIm5ld0FycmF5IiwiYWRkaW5nQXJyYXkiLCJhZGRpbmdEaWdpdCIsInBvaW50ZXJFdmVudHMiLCJyYW5kb21pc2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZ3JpZEl0ZW1QbGF5ZXIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImdyaWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwbGF5ZXJTaGlwIiwicGFyc2VJbnQiLCJwbGF5ZXJTaGlwcyIsImNvbXBTaGlwIiwiY29tcHV0ZXJTaGlwcyIsImRpc2FibGVkIiwiY2hlY2tHYW1lRW5kIiwiY29uc29sZSIsImxvZyIsInNob3RzQXJyYXkiLCJzaG90c0FycmF5Q29tcCIsIml0ZW0iLCJwYXJzZUZsb2F0Iiwic2hpcEFycmF5IiwicmVtb3ZlIiwic2V0VGltZW91dCIsImdldEVsZW1lbnRCeUlkIiwiY29tcHV0ZXJQbGF5IiwiaGl0Qm9hcmQiLCJjb3VudCIsIm5ld0FycmF5RWxlbWVudCIsImNsaWNrIiwiZ3JpZExpbmUiLCJzb21lRnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9