(()=>{"use strict";const t=class{constructor(t){this.name=t,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let t=0;t<100;t++)this.boardPositionArray.push(t)}receiveAttack(t){return this.boardPositionArray.includes(t)?(this.boardPositionArray.includes(t)&&this.boardPositionArray.splice(t,1),this.checkingIfHit(t)):"out of the box"}checkingIfHit(t){return!!this.hasShipArray.includes(t)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(t),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(t){const r=t.sort(((t,r)=>t-r)),s=[9,19,29,39,49,59,69,79,89,99],e=[90,91,92,93,94,95,96,97,98,99];for(let i=0;i<r.length-1;i++){if(t[i]<0)return!1;if(!this.boardPositionArray.includes(r[i]))return!1;if(this.hasShipArray.includes(t[i]))return!1;if(this.hasShipArray.includes(t[r.length-1]))return!1;if(r[i+1]-r[i]!=1&&r[i+1]-r[i]!=10)return!1;if(s.includes(r[i])||e.includes(r[i])){if(t.every((t=>s.includes(t)||e.includes(t))))break;if(i!==r.length||0!==i)return!1}}return this.hasShipArray.push(...r),!0}}}};class r{constructor(t,r,s,e=0){this.name=t,this.length=r,this.position=s,this.hits=e,this.hasSunken=!1}hit(t){this.position.splice(this.position.indexOf(t),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}const s=new t("player"),e=new t("computer");!function(){!function(){function t(t,r=10,s=10){t.style.setProperty("--grid-rows",r),t.style.setProperty("--grid-cols",s);for(let e=0;e<r*s;e++){const r=document.createElement("div");t.appendChild(r),r.classList.add("grid-item"),r.id=e}}const r=document.querySelector(".player-1"),s=document.querySelector(".player-2");t(r),t(s)}();const t=(r,s)=>{const e=Math.floor(100*Math.random()),i=[];for(let t=0;t<r;t++)i.push(e+t);return s.board.shipsPlacement(i)?i:t(r,s)};(()=>{let e=5;for(let i=0;i<5;i++){const o=new r(`ship${i}`,e,t(e,s));s.ships.push(o),2!==e&&e--}for(let t=0;t<5;t++)0===t&&(s.board.hasShipArray=[]),s.board.shipsPlacement(s.ships[t].position);document.querySelectorAll(".player-1 .grid-item").forEach((t=>{s.board.hasShipArray.includes(parseInt(t.id,10))&&(t.style.backgroundColor="green")}))})(),(()=>{let s=5;for(let i=0;i<5;i++){const o=new r(`ship${i}`,s,t(s,e));e.ships.push(o),2!==s&&s--}for(let t=0;t<5;t++)0===t&&(e.board.hasShipArray=[]),e.board.shipsPlacement(e.ships[t].position)})()}(),function(){const t=t=>0===t.board.hasShipArray.length&&(document.querySelector(".game").style.pointerEvents="none",console.log(`${t.name} Lost`),!0),r=[],i=document.querySelector(".player-1"),o=document.querySelector(".player-2");i.classList.add("turn");const n=[];document.querySelectorAll(".player-2 .grid-item").forEach((a=>{a.addEventListener("click",(()=>{const h=parseFloat(a.id);if(!r.includes(h)){r.push(h);const l=e.board.hasShipArray;if(l.includes(h)){if(a.style.backgroundColor="red",l.splice(l.indexOf(h),1),t(e))return 0}else a.style.backgroundColor="yellow";o.classList.add("turn"),i.classList.remove("turn"),setTimeout((()=>{(()=>{const r=Math.floor(Math.random()*e.board.boardPositionArray.length),a=e.board.boardPositionArray[r];if(e.board.boardPositionArray.splice(r,1),!n.includes(a)){const r=document.getElementById(`${a}`);n.push(a);const e=s.board.hasShipArray;if(e.includes(a)){if(r.style.backgroundColor="red",e.splice(e.indexOf(a),1),t(s))return 0}else r.style.backgroundColor="yellow";i.classList.add("turn"),o.classList.remove("turn")}})()}),1e3)}return 0}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,