(()=>{"use strict";class e{constructor(e,t,s,r=0){this.name=e,this.length=t,this.position=s,this.hits=r,this.hasSunken=!1}hit(e){this.position.splice(this.position.indexOf(e),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}const t=class{constructor(e){this.name=e,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let e=0;e<100;e++)this.boardPositionArray.push(e)}receiveAttack(e){return this.boardPositionArray.includes(e)?(this.boardPositionArray.includes(e)&&this.boardPositionArray.splice(e,1),this.checkingIfHit(e)):"out of the box"}checkingIfHit(e){return!!this.hasShipArray.includes(e)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(e),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(e){const t=e.sort(((e,t)=>e-t)),s=[9,19,29,39,49,59,69,79,89,99],r=[90,91,92,93,94,95,96,97,98,99];for(let i=0;i<t.length-1;i++){if(e[i]<0)return!1;if(!this.boardPositionArray.includes(t[i]))return!1;if(this.hasShipArray.includes(e[i]))return!1;if(this.hasShipArray.includes(e[t.length-1]))return!1;if(t[i+1]-t[i]!=1&&t[i+1]-t[i]!=10)return!1;if(s.includes(t[i])||r.includes(t[i])){if(e.every((e=>s.includes(e)||r.includes(e))))break;if(i!==t.length||0!==i)return!1}}return this.hasShipArray.push(...t),!0}}}},s=new t("player"),r=new t("computer"),i=document.querySelector(".game-start");!function(){!function(){function e(e,t=10,s=10){e.style.setProperty("--grid-rows",t),e.style.setProperty("--grid-cols",s);for(let r=0;r<t*s;r++){const t=document.createElement("div");e.appendChild(t),t.classList.add("grid-item"),t.id=r}}const t=document.querySelector(".player-1"),s=document.querySelector(".player-2");e(t),e(s)}();const t=(e,s)=>{const r=Math.floor(100*Math.random()),i=[],o=[1,10,1,10,10,1,10,1],n=o[Math.floor(Math.random()*o.length)];for(let t=0;t<e;t++)i.push(r+t*n);return s.board.shipsPlacement(i)?i:t(e,s)},o=document.querySelector(".player-1"),n=document.querySelector(".player-2");n.classList.add("turn");const l=document.querySelector(".randomPlayer"),a=document.querySelector(".manual"),c=document.querySelector(".buttons");l.addEventListener("click",(()=>{(()=>{s.ships=[],s.board.hasShipArray=[];const r=document.querySelectorAll(".player-1 .grid-item");r.forEach((e=>{e.style.backgroundColor="rgb(17, 24, 39)"}));let i=5;for(let r=0;r<5;r++){const o=new e(`ship${r}`,i,t(i,s));s.ships.push(o),2!==i&&i--}for(let e=0;e<5;e++)0===e&&(s.board.hasShipArray=[]),s.board.shipsPlacement(s.ships[e].position);r.forEach((e=>{s.board.hasShipArray.includes(parseInt(e.id,10))&&(e.style.backgroundColor="green")}))})(),o.style.pointerEvents="none"})),i.addEventListener("click",(()=>16!==s.board.hasShipArray.length?(l.classList.add("invalid"),a.classList.add("invalid"),setTimeout((()=>{l.classList.remove("invalid"),a.classList.remove("invalid")}),2e3),!1):(c.classList.add("hide"),o.style.pointerEvents="none",(()=>{document.querySelector(".player-1").classList.add("turn");let s=5;for(let i=0;i<5;i++){const o=new e(`ship${i}`,s,t(s,r));r.ships.push(o),2!==s&&s--}for(let e=0;e<5;e++)0===e&&(r.board.hasShipArray=[]),r.board.shipsPlacement(r.ships[e].position)})(),l.disabled=!0,i.disabled=!0,n.classList.remove("turn"),0)))}(),function(){const e=e=>{if(0===e.board.hasShipArray.length){const t=document.querySelector(".reset");t.style.pointerEvents="all";const s=document.querySelector(".win-display");return s.textContent=`${e.name} lost`,s.classList.add("show"),t.classList.add("show"),document.querySelector(".game").style.pointerEvents="none",!0}return!1},t=[],i=[],o=document.querySelector(".player-1"),n=document.querySelector(".player-2");let l,a=!1;document.querySelectorAll(".player-2 .grid-item").forEach((c=>{c.addEventListener("click",(()=>{const d=parseFloat(c.id);if(!t.includes(d)){t.push(d);const h=r.board.hasShipArray;if(h.includes(d)){if(c.style.backgroundColor="red",h.splice(h.indexOf(d),1),e(r))return 0}else c.style.backgroundColor="yellow";n.classList.add("turn"),o.classList.remove("turn"),setTimeout((()=>{(()=>{const t=s.board.boardPositionArray;let r=t[Math.floor(Math.random()*t.length)];if(a&&(r=((e,t)=>{for(let r=0;r<5;r++)if(s.ships[r].position.includes(e)){if(s.ships[r].hits===s.ships[r].length-1)return a=!1,t;const i=s.ships[r].position;return s.ships[r].hit(e),i[0]}})(l,r)),t.splice(t.indexOf(r),1),!i.includes(r)){l=r;const t=document.getElementById(`${r}`);i.push(r);const c=s.board.hasShipArray;if(c.includes(r)){if(a=!0,t.style.backgroundColor="red",c.splice(c.indexOf(r),1),e(s))return 0}else t.style.backgroundColor="yellow";o.classList.add("turn"),n.classList.remove("turn"),console.log(s)}})()}),1e3)}return 0}))}))}(),function(){const t=document.querySelector(".manual"),r=document.querySelector(".rotate");t.addEventListener("click",(()=>{r.classList.remove("hide"),function(){const t=document.querySelectorAll(".player-1 .grid-item"),r=document.querySelector(".rotate");let o=1;r.addEventListener("click",(()=>{o=1===o?10:1}));let n=5,l=0;t.forEach((r=>{r.addEventListener("click",(()=>{const a=[];for(let e=0;e<n;e++){const t=parseInt(r.id,10)+e*o;a.push(t)}if(!s.board.shipsPlacement(a))return!1;const c=new e(`ship-${l}`,n,a);return s.ships.push(c),t.forEach((e=>{e.style.backgroundColor=" ",e.style.border="1px solid red",s.board.hasShipArray.includes(parseInt(e.id,10))&&e.classList.add("green")})),l++,5===l&&i.click(),2===n?0:(n--,!0)})),r.addEventListener("mouseover",(()=>{for(let e=1;e<n;e++){const t=document.getElementById(`${parseInt(r.id,10)+e*o}`);if("green"===t.classList[1])return!1;t.style.border="2px solid green"}r.style.border="2px solid green"})),r.addEventListener("mouseleave",(()=>{for(let e=1;e<5;e++){const t=document.getElementById(`${parseInt(r.id,10)+e*o}`);if("green"===t.classList[1])return!1;t.style.border="1px solid red"}r.style.border="1px solid red"}))}))}()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,