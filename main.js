(()=>{"use strict";const e=class{constructor(e){this.name=e,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let e=0;e<100;e++)this.boardPositionArray.push(e)}receiveAttack(e){return this.boardPositionArray.includes(e)?(this.boardPositionArray.includes(e)&&this.boardPositionArray.splice(e,1),this.checkingIfHit(e)):"out of the box"}checkingIfHit(e){return!!this.hasShipArray.includes(e)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(e),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(e){const s=e.sort(((e,s)=>e-s)),r=[9,19,29,39,49,59,69,79,89,99],t=[90,91,92,93,94,95,96,97,98,99];for(let i=0;i<s.length-1;i++){if(e[i]<0)return!1;if(!this.boardPositionArray.includes(s[i]))return!1;if(this.hasShipArray.includes(e[i]))return!1;if(this.hasShipArray.includes(e[s.length-1]))return!1;if(s[i+1]-s[i]!=1&&s[i+1]-s[i]!=10)return!1;if(r.includes(s[i])||t.includes(s[i])){if(e.every((e=>r.includes(e)||t.includes(e))))break;if(i!==s.length||0!==i)return!1}}return this.hasShipArray.push(...s),!0}}}};class s{constructor(e,s,r,t=0){this.name=e,this.length=s,this.position=r,this.hits=t,this.hasSunken=!1}hit(e){this.position.splice(this.position.indexOf(e),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}const r=new e("player"),t=new e("computer");!function(){!function(){function e(e,s=10,r=10){e.style.setProperty("--grid-rows",s),e.style.setProperty("--grid-cols",r);for(let t=0;t<s*r;t++){const s=document.createElement("div");e.appendChild(s),s.classList.add("grid-item"),s.id=t}}const s=document.querySelector(".player-1"),r=document.querySelector(".player-2");e(s),e(r)}();const e=(s,r)=>{const t=Math.floor(100*Math.random()),i=[];for(let e=0;e<s;e++)i.push(t+e);return r.board.shipsPlacement(i)?i:e(s,r)};(()=>{let t=5;for(let i=0;i<5;i++){const o=new s(`ship${i}`,t,e(t,r));r.ships.push(o),2!==t&&t--}for(let e=0;e<5;e++)0===e&&(r.board.hasShipArray=[]),console.log(r.board.shipsPlacement(r.ships[e].position));document.querySelectorAll(".player-1 .grid-item").forEach((e=>{r.board.hasShipArray.includes(parseInt(e.id,10))&&(e.style.backgroundColor="green")}))})(),(()=>{let r=5;for(let i=0;i<5;i++){const o=new s(`ship${i}`,r,e(r,t));t.ships.push(o),console.log("ok"),2!==r&&r--}for(let e=0;e<5;e++)0===e&&(t.board.hasShipArray=[]),console.log(t.board.shipsPlacement(t.ships[e].position));document.querySelectorAll(".player-2 .grid-item").forEach((e=>{t.board.hasShipArray.includes(parseInt(e.id,10))&&(e.style.backgroundColor="green")}))})(),console.log(t)}(),function(){const e=e=>{0===e.board.hasShipArray.length&&(document.querySelector(".game").style.pointerEvents="none")},s=[];document.querySelectorAll(".player-1 .grid-item").forEach((t=>{t.addEventListener("click",(()=>{const i=parseFloat(t.id);if(!s.includes(i)){s.push(i),console.log(t.id),console.log(r.board);const o=r.board.hasShipArray;o.includes(i)?(t.style.backgroundColor="red",o.splice(o.indexOf(i),1),e(r)):t.style.backgroundColor="yellow"}}))}));const i=[];document.querySelectorAll(".player-2 .grid-item").forEach((s=>{s.addEventListener("click",(()=>{const o=parseFloat(s.id);if(!i.includes(o)){i.push(o),console.log(s.id),console.log(r.board);const n=t.board.hasShipArray;n.includes(o)?(s.style.backgroundColor="red",n.splice(n.indexOf(o),1),e(t)):s.style.backgroundColor="yellow"}}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,