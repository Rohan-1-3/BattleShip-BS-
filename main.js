(()=>{"use strict";const r=class{constructor(r){this.name=r,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let r=0;r<100;r++)this.boardPositionArray.push(r)}receiveAttack(r){return this.boardPositionArray.includes(r)?(this.boardPositionArray.includes(r)&&this.boardPositionArray.splice(r,1),this.checkingIfHit(r)):"out of the box"}checkingIfHit(r){return!!this.hasShipArray.includes(r)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(r),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(r){const e=r.sort(((r,e)=>r-e)),s=[9,19,29,39,49,59,69,79,89,99],t=[90,91,92,93,94,95,96,97,98,99];for(let i=0;i<e.length-1;i++){if(r[i]<0)return!1;if(!this.boardPositionArray.includes(e[i]))return!1;if(this.hasShipArray.includes(r[i]))return!1;if(this.hasShipArray.includes(r[e.length-1]))return!1;if(e[i+1]-e[i]!=1&&e[i+1]-e[i]!=10)return!1;if(s.includes(e[i])||t.includes(e[i])){if(r.every((r=>s.includes(r)||t.includes(r))))break;if(i!==e.length||0!==i)return!1}}return this.hasShipArray.push(...e),!0}}}};class e{constructor(r,e,s,t=0){this.name=r,this.length=e,this.position=s,this.hits=t,this.hasSunken=!1}hit(r){this.position.splice(this.position.indexOf(r),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}const s=new r("player"),t=new r("computer");!function(){!function(){function r(r,e=10,s=10){r.style.setProperty("--grid-rows",e),r.style.setProperty("--grid-cols",s);for(let t=0;t<e*s;t++){const e=document.createElement("div");r.appendChild(e),e.classList.add("grid-item"),e.id=t}}const e=document.querySelector(".player-1"),s=document.querySelector(".player-2");r(e),r(s)}();const r=(e,s)=>{const t=Math.floor(100*Math.random()),i=[];for(let r=0;r<e;r++)i.push(t+r);return s.board.shipsPlacement(i)?i:r(e,s)};(()=>{let t=5;for(let i=0;i<5;i++){const o=new e(`ship${i}`,t,r(t,s));s.ships.push(o),2!==t&&t--}for(let r=0;r<5;r++)0===r&&(s.board.hasShipArray=[]),console.log(s.board.shipsPlacement(s.ships[r].position));document.querySelectorAll(".player-1 .grid-item").forEach((r=>{s.board.hasShipArray.includes(parseInt(r.id,10))&&(r.style.backgroundColor="green")}))})(),(()=>{let s=5;for(let i=0;i<5;i++){const o=new e(`ship${i}`,s,r(s,t));t.ships.push(o),console.log("ok"),2!==s&&s--}for(let r=0;r<5;r++)0===r&&(t.board.hasShipArray=[]),console.log(t.board.shipsPlacement(t.ships[r].position));document.querySelectorAll(".player-2 .grid-item").forEach((r=>{t.board.hasShipArray.includes(parseInt(r.id,10))&&(r.style.backgroundColor="green")}))})(),console.log(t)}(),function(){const r=r=>0===r.board.hasShipArray.length&&(document.querySelector(".game").style.pointerEvents="none",!0),e=[],i=document.querySelector(".player-1"),o=document.querySelector(".player-2");i.classList.add("turn");const n=[];document.querySelectorAll(".player-2 .grid-item").forEach((a=>{a.addEventListener("click",(()=>{const l=parseFloat(a.id);if(!e.includes(l)){e.push(l);const c=t.board.hasShipArray;if(c.includes(l)){if(a.style.backgroundColor="red",c.splice(c.indexOf(l),1),r(t))return 0}else a.style.backgroundColor="yellow";o.classList.add("turn"),i.classList.remove("turn"),setTimeout((()=>{(()=>{const e=Math.floor(Math.random()*t.board.boardPositionArray.length),a=t.board.boardPositionArray[e];if(t.board.boardPositionArray.splice(e,1),!n.includes(a)){const e=document.getElementById(`${a}`);n.push(a);const t=s.board.hasShipArray;if(t.includes(a)){if(e.style.backgroundColor="red",t.splice(t.indexOf(a),1),r(s))return 0}else e.style.backgroundColor="yellow";i.classList.add("turn"),o.classList.remove("turn")}})()}),1e3)}return 0}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,