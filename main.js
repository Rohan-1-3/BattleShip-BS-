(()=>{"use strict";class e{constructor(e,t,r,s=0){this.name=e,this.length=t,this.position=r,this.hits=s,this.hasSunken=!1}hit(e){this.position.splice(this.position.indexOf(e),1),this.hits++,this.isSunk(this.hits)}isSunk(){0===this.position.length&&(this.hasSunken=!0)}}const t=class{constructor(e){this.name=e,this.ships=[],this.board=new class{constructor(){this.boardPositionArray=[],this.hasShipArray=[],this.boardCreate()}boardCreate(){for(let e=0;e<100;e++)this.boardPositionArray.push(e)}receiveAttack(e){return this.boardPositionArray.includes(e)?(this.boardPositionArray.includes(e)&&this.boardPositionArray.splice(e,1),this.checkingIfHit(e)):"out of the box"}checkingIfHit(e){return!!this.hasShipArray.includes(e)&&(this.hasShipArray.splice(this.hasShipArray.indexOf(e),1),!0)}gameEnd(){return!(0!==this.hasShipArray.length)}shipsPlacement(e){const t=e.sort(((e,t)=>e-t)),r=[9,19,29,39,49,59,69,79,89,99],s=[90,91,92,93,94,95,96,97,98,99];for(let o=0;o<t.length-1;o++){if(e[o]<0)return!1;if(!this.boardPositionArray.includes(t[o]))return!1;if(this.hasShipArray.includes(e[o]))return!1;if(this.hasShipArray.includes(e[t.length-1]))return!1;if(t[o+1]-t[o]!=1&&t[o+1]-t[o]!=10)return!1;if(r.includes(t[o])||s.includes(t[o])){if(e.every((e=>r.includes(e)||s.includes(e))))break;if(o!==t.length||0!==o)return!1}}return this.hasShipArray.push(...t),!0}}}},r=new t("player"),s=new t("computer"),o=document.querySelector(".game-start");!function(){!function(){function e(e,t=10,r=10){e.style.setProperty("--grid-rows",t),e.style.setProperty("--grid-cols",r);for(let s=0;s<t*r;s++){const t=document.createElement("div");e.appendChild(t),t.classList.add("grid-item"),t.id=s}}const t=document.querySelector(".player-1"),r=document.querySelector(".player-2");e(t),e(r)}();const t=(e,r)=>{const s=Math.floor(100*Math.random()),o=[],i=[1,10,1,10,10,1,10,1],n=i[Math.floor(Math.random()*i.length)];for(let t=0;t<e;t++)o.push(s+t*n);return r.board.shipsPlacement(o)?o:t(e,r)},i=document.querySelector(".player-1"),n=document.querySelector(".player-2");n.classList.add("turn");const a=document.querySelector(".randomPlayer"),l=document.querySelector(".buttons");a.addEventListener("click",(()=>{(()=>{r.ships=[],r.board.hasShipArray=[];const s=document.querySelectorAll(".player-1 .grid-item");s.forEach((e=>{e.style.backgroundColor="rgb(17, 24, 39)"}));let o=5;for(let s=0;s<5;s++){const i=new e(`ship${s}`,o,t(o,r));r.ships.push(i),2!==o&&o--}for(let e=0;e<5;e++)0===e&&(r.board.hasShipArray=[]),r.board.shipsPlacement(r.ships[e].position);s.forEach((e=>{r.board.hasShipArray.includes(parseInt(e.id,10))&&(e.style.backgroundColor="green")}))})(),i.style.pointerEvents="none"})),o.addEventListener("click",(()=>16===r.board.hasShipArray.length&&(l.classList.add("hide"),i.style.pointerEvents="none",(()=>{document.querySelector(".player-1").classList.add("turn");let r=5;for(let o=0;o<5;o++){const i=new e(`ship${o}`,r,t(r,s));s.ships.push(i),2!==r&&r--}for(let e=0;e<5;e++)0===e&&(s.board.hasShipArray=[]),s.board.shipsPlacement(s.ships[e].position)})(),a.disabled=!0,o.disabled=!0,n.classList.remove("turn"),0)))}(),function(){const e=e=>{if(0===e.board.hasShipArray.length){const t=document.querySelector(".reset");t.style.pointerEvents="all";const r=document.querySelector(".win-display");return r.textContent=`${e.name} lost`,r.classList.add("show"),t.classList.add("show"),document.querySelector(".game").style.pointerEvents="none",!0}return!1},t=[],o=[],i=document.querySelector(".player-1"),n=document.querySelector(".player-2");document.querySelectorAll(".player-2 .grid-item").forEach((a=>{a.addEventListener("click",(()=>{const l=parseFloat(a.id);if(!t.includes(l)){t.push(l);const c=s.board.hasShipArray;if(c.includes(l)){if(a.style.backgroundColor="red",c.splice(c.indexOf(l),1),e(s))return 0}else a.style.backgroundColor="yellow";n.classList.add("turn"),i.classList.remove("turn"),setTimeout((()=>{(()=>{const t=Math.floor(Math.random()*r.board.boardPositionArray.length),s=r.board.boardPositionArray[t];if(r.board.boardPositionArray.splice(t,1),!o.includes(s)){const t=document.getElementById(`${s}`);o.push(s);const a=r.board.hasShipArray;if(a.includes(s)){if(t.style.backgroundColor="red",a.splice(a.indexOf(s),1),e(r))return 0}else t.style.backgroundColor="yellow";i.classList.add("turn"),n.classList.remove("turn")}})()}),1e3)}return 0}))}))}(),function(){const t=document.querySelector(".manual"),s=document.querySelector(".rotate");t.addEventListener("click",(()=>{s.classList.remove("hide"),function(){const t=document.querySelectorAll(".player-1 .grid-item"),s=document.querySelector(".rotate");let i=1;s.addEventListener("click",(()=>{i=1===i?10:1}));let n=5,a=0;t.forEach((s=>{s.addEventListener("click",(()=>{const l=[];for(let e=0;e<n;e++){const t=parseInt(s.id,10)+e*i;l.push(t)}if(!r.board.shipsPlacement(l))return!1;const c=new e(`ship-${a}`,n,l);return r.ships.push(c),t.forEach((e=>{e.style.backgroundColor=" ",e.style.border="1px solid red",r.board.hasShipArray.includes(parseInt(e.id,10))&&e.classList.add("green")})),a++,5===a&&o.click(),2===n?0:(n--,!0)})),s.addEventListener("mouseover",(()=>{for(let e=1;e<n;e++){const t=document.getElementById(`${parseInt(s.id,10)+e*i}`);if("green"===t.classList[1])return!1;t.style.border="2px solid green"}s.style.border="2px solid green"})),s.addEventListener("mouseleave",(()=>{for(let e=1;e<5;e++){const t=document.getElementById(`${parseInt(s.id,10)+e*i}`);if("green"===t.classList[1])return!1;t.style.border="1px solid red"}s.style.border="1px solid red"}))}))}()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,